# 네오는 평소 프로도가 비상금을 숨겨놓는 장소를 알려줄 비밀지도를 손에 넣었다. 
# 그런데 이 비밀지도는 숫자로 암호화되어 있어 위치를 확인하기 위해서는 암호를 해독해야 한다.
# 다행히 지도 암호를 해독할 방법을 적어놓은 메모도 함께 발견했다.

# 1. 지도는 한 변의 길이가 n인 정사각형 배열 형태로, 각 칸은 "공백"(" ") 또는 "벽"("#") 두 종류로 이루어져 있다.
# 2. 전체 지도는 두 장의 지도를 겹쳐서 얻을 수 있다. 각각 "지도 1"과 "지도 2"라고 하자. 지도 1 또는 지도 2 중 어느 하나라도 벽인 부분은 전체 지도에서도 벽이다. 
#    지도 1과 지도 2에서 모두 공백인 부분은 전체 지도에서도 공백이다.
# 3. "지도 1"과 "지도 2"는 각각 정수 배열로 암호화되어 있다.
# 4. 암호화된 배열은 지도의 각 가로줄에서 벽 부분을 1, 공백 부분을 0으로 부호화했을 때 얻어지는 이진수에 해당하는 값의 배열이다.

# solution(6, [46, 33, 33 ,22, 31, 50], [27 ,56, 19, 14, 14, 10])
# 매개변수	값
# n	5
# arr1	[9, 20, 28, 18, 11]
# arr2	[30, 1, 21, 17, 28]
# 출력	["#####","# # #", "### #", "# ##", "#####"]

# 6
# arr1	[46, 33, 33 ,22, 31, 50]
# arr2	[27 ,56, 19, 14, 14, 10]
# 출력	["######", "### #", "## ##", " #### ", " #####", "### # "]

# < 내가 푼거 >------------------------------------------------------
def solution(n, arr1, arr2):
    wall = {'0':" " ,'1':"#", '2':"#" }
    save = [[] * n for i in range(n)]
    answer = [[] * n for i in range(n)]
    map1 = []
    map2 = []

    for i in range(0, n):
        map1.append(format(int(arr1[i]),'b'))
        map2.append(format(int(arr2[i]),'b'))
        save[i] = str(int(map1[i]) + int(map2[i])).zfill(n)
        for j in range(0, n):
            answer[i].append(wall[str(save[i])[j]])
        answer[i] = ''.join(answer[i]) 
    print(save)
    return answer
solution(5, [9, 20, 28, 18, 11], [30, 1, 21, 17, 28])
# ------------------------------------------------------

# < 모범답안 >------------------------------------------------------
# 비트 연산자 이용 및 오른쪽 정렬 후 공백 0으로 채우기 replace로 변환 
def solution(n, arr1, arr2):
    answer = []
    for i,j in zip(arr1,arr2): # zip으로 리스트의 값 반복해서 i,j에 넣어주기
        a12 = str(bin(i|j)[2:]) # bin(2진수 변환기), i|j 비트 연산 사용
        a12 = a12.rjust(n,'0') # 오른쪽 정렬 (칸수, 빈칸 채울 값)
        a12 = a12.replace('1','#')
        a12 = a12.replace('0',' ')
        answer.append(a12)
    return answer
solution(5, [9, 20, 28, 18, 11], [30, 1, 21, 17, 28])